[tool.poetry]
name = "voicerecog"
version = "0.1.0"
description = ""
authors = ["sondeko <sondeko143@gmail.com>"]
license = "MIT"
readme = ["README.md", "LICENSE"]
repository = "https://github.com/sondeko143/vstreamer-tool"

[tool.poetry.dependencies]
google-cloud-translate = "^3.11.1"
python = ">=3.11,<3.12"
httpx = ">=0.24.0,<0.25.0"
pydantic = "^1.10.7"
aiofiles = "^23.1.0"
pyhumps = "^3.8.0"
google-cloud-speech = "^2.19.0"
toml = "^0.10.2"
click = "^8.1.3"
vstreamer-protos = { url = "https://github.com/sondeko143/vstreamer-protos/releases/download/main-f8b53233/vstreamer_protos-0.1.0-py3-none-any.whl" }
voicevox-core = [
    { url = "https://github.com/VOICEVOX/voicevox_core/releases/download/0.14.3/voicevox_core-0.14.3+cuda-cp38-abi3-win_amd64.whl", platform = "win32", optional = true },
    { url = "https://github.com/VOICEVOX/voicevox_core/releases/download/0.14.3/voicevox_core-0.14.3+cpu-cp38-abi3-macosx_11_0_arm64.whl", platform = "darwin", markers = "platform_machine == 'arm64'", optional = true },
    { url = "https://github.com/VOICEVOX/voicevox_core/releases/download/0.14.3/voicevox_core-0.14.3+cpu-cp38-abi3-linux_x86_64.whl", platform = "linux", markers = "platform_machine == 'x86_64'", optional = true },
]
faster-whisper = "^1.0.3"
torch = [
    { url = "https://download.pytorch.org/whl/cu121/torch-2.2.0%2Bcu121-cp311-cp311-win_amd64.whl", platform = "win32", optional = true },
    { url = "https://download.pytorch.org/whl/cpu/torch-2.2.0-cp311-none-macosx_11_0_arm64.whl", platform = "darwin", markers = "platform_machine == 'arm64'", optional = true },
    { url = "https://download.pytorch.org/whl/cu121/torch-2.2.0%2Bcu121-cp311-cp311-linux_x86_64.whl", platform = "linux", optional = true },
]
fairseq = { url = "https://github.com/sondeko143/fairseq-311/releases/download/v0.12.2.post1/fairseq-0.12.2.post1-cp311-cp311-win_amd64.whl", optional = true }
pyworld = { version = "^0.3.3", optional = true }
faiss-gpu = { version = "^1.7.2", platform = "linux", optional = true }
faiss-cpu = [
    { version = "^1.7.2", platform = "win32", optional = true },
    { version = "^1.7.2", platform = "darwin", optional = true },
]
onnxruntime-gpu = { version = "^1.17.1", optional = true, platform = "win32" }
onnxruntime = { version = "^1.17.1", optional = true, platform = "darwin" }
torchaudio = [
    { url = "https://download.pytorch.org/whl/cu121/torchaudio-2.2.0%2Bcu121-cp311-cp311-win_amd64.whl", platform = "win32", optional = true },
    { url = "https://download.pytorch.org/whl/cpu/torchaudio-2.2.0-cp311-cp311-macosx_11_0_arm64.whl", platform = "darwin", markers = "platform_machine == 'arm64'", optional = true },
    { url = "https://download.pytorch.org/whl/cu121/torchaudio-2.2.0%2Bcu121-cp311-cp311-linux_x86_64.whl", platform = "linux", optional = true },
]
numpy = { version = ">=1.18,<1.24", optional = true }
scipy = { version = "^1.10.1", optional = true }
mozcpy = { version = "^0.1.1", optional = true }
pyvcroid2 = { git = "https://github.com/Nkyoku/pyvcroid2", platform = "win32", optional = true }
PyAudio = { version = "^0.2.13", optional = true }
ttkbootstrap = { version = "^1.10.1", optional = true }
pillow = { version = "^10.0.1", optional = true }
colorlog = "^6.7.0"
onnx = { version = "^1.16.2", optional = true }
onnxsim = { version = "^0.4.30", optional = true }
emoji = "^2.6.0"
librosa = { version = "^0.10.1", optional = true }

[tool.poetry.group.dev.dependencies]
pytest = "^7.3.1"
docutils = "^0.19"
pytest-cov = "^4.0.0"
pytest-grpc = "^0.8.0"
pytest-asyncio = "^0.21.0"
pytest-httpx = "^0.22.0"


[tool.poetry.extras]
voicevox = ["voicevox-core"]
whisper = ["faster-whisper", "torch"]
rvc = [
    "torch",
    "fairseq",
    "pyworld",
    "faiss-gpu",
    "faiss-cpu",
    "onnxruntime-gpu",
    "onnxruntime",
    "torchaudio",
    "numpy",
    "scipy",
    "resampy",
]
mozc = ["mozcpy"]
vroid2 = ["pyvcroid2"]
audio = ["PyAudio"]
gui = ["ttkbootstrap", "pillow"]
onnxexport = ["onnx", "onnxsim"]
crepe = ["librosa"]

[tool.poetry.scripts]
vspeech = "vspeech.main:cmd"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
testpaths = ["tests"]
pythonpath = "."
asyncio_mode = "auto"

[tool.pyright]
typeCheckingMode = "strict"
reportUnknownMemberType = "warning"
reportMissingTypeStubs = "warning"
reportUnknownVariableType = "warning"

[tool.ruff.lint.isort]
force-single-line = true
